
service: DemoApi
 
plugins: 
  - serverless-dotnet 
 
provider: 
  runtime: dotnetcore2.0 
  name: aws 
  timeout: 10
  role: ${s3:${self:custom.globalConfig}/role.var}                                  # Change to a privileged role 
  logRetentionInDays: 7
  memorySize: 128
  deploymentBucket: ${s3:${self:custom.globalConfig}/deploymentBucket.var}          # Change me to a temporary S3 bucket to hold deployment files
  versionFunctions: true
 
custom:

############################################################################################################### 
# Global variable configuration 
############################################################################################################### 
 
  globalConfig: ${opt:region, env:AWS_REGION}.config.enumis.co.uk   
  appConfig: ${self:custom.globalConfig}/${self:service} 

####################################################################################################### 
# Function definitions 
####################################################################################################### 
 
functions: 

  ##############################################################################################################################
  ##############################################################################################################################
  ##############################################################################################################################

  # -------------------------------------------------------------------------------
  # ------- Proxy / Catch-All Endpoint --------------------------------------------
  # -------------------------------------------------------------------------------

  Proxy:
    handler: MyApp::MyApp.APIGatewayProxy::FunctionHandlerAsync
    events:
      - http: 
          method: any
          path: "/{proxy+}"
          cors: true

  Ping:
    handler: MyApp::MyApp.APIGatewayProxy::FunctionHandlerAsync
    events:
      - http: 
          method: any
          path: "/ping"
          cors: true
          #integration: lambda  
          #request:
          #  template:
          #    application/json: >
          #      {
          #          "resource": "$context.resourcePath",
          #          "path": "$context.path",
          #          "httpMethod": "$context.httpMethod",
          #          "headers": {
          #              #foreach($header in $input.params().header.keySet())
          #              "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
          #              #end
          #          },
          #          "body": "$util.escapeJavaScript($input.json('$'))",
          #          "isBase64Encoded": false
          #      }
          #response:
          #  headers:
          #    Access-Control-Allow-Origin: "'*'"
          #    Access-Control-Allow-Credentials: "'true'"
          #    Access-Control-Allow-Headers: "'*'"
          #    Access-Control-Allow-Methods: "'*'"
          #    Content-Type: "'application/json'"
          #  statusCodes:
          #    400:
          #      pattern: '.*errorMessage.*'
          #      template:
          #        application/json: >
          #          #set ($errorMessageObj = $input.path('$.errorMessage'))
          #          $errorMessageObj