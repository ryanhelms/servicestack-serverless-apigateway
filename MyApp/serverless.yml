
service: DemoApi
 
plugins: 
  - serverless-dotnet 
 
provider: 
  runtime: dotnetcore2.0 
  name: aws 
  timeout: ${s3:${self:custom.globalConfig}/timeout.var} 
  role: ${s3:${self:custom.globalConfig}/role.var} 
  logRetentionInDays: 7
  memorySize: ${s3:${self:custom.globalConfig}/memorySize.var} 
  deploymentBucket: ${s3:${self:custom.globalConfig}/deploymentBucket.var} 
  versionFunctions: true
 
custom:

############################################################################################################### 
# Global variable configuration 
############################################################################################################### 
 
  globalConfig: ${opt:region, env:AWS_REGION}.config.enumis.co.uk   
  appConfig: ${self:custom.globalConfig}/${self:service} 

####################################################################################################### 
# Function definitions 
####################################################################################################### 
 
functions: 

  ##############################################################################################################################
  ##############################################################################################################################
  ##############################################################################################################################

  # -------------------------------------------------------------------------------
  # ------- Proxy / Catch-All Endpoint --------------------------------------------
  # -------------------------------------------------------------------------------

  Proxy:
    handler: MyApp::MyApp.APIGatewayProxy::FunctionHandlerAsync
    events:
      - http: 
          method: any
          path: "/{proxy+}"
          cors: true

  Ping:
    handler: MyApp::MyApp.APIGatewayProxy::FunctionHandlerAsync
    events:
      - http: 
          method: any
          path: "/ping"
          cors: true
          integration: lambda  
          request:
            template:
              application/json: >
                { "httpMethod" : "$context.httpMethod", "path": "$context.path", "body": "$util.escapeJavaScript($input.body)" }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Credentials: "'true'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
            statusCodes:
              400:
                pattern: '.*errorMessage.*'
                template:
                  application/json: >
                    #set ($errorMessageObj = $input.path('$.errorMessage'))
                    $errorMessageObj